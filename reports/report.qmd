---
title: Homework 8 - World Bank Analysis
author: Mohamed Elnafe
date: last-modified
format:
  html:
    theme: cosmo
    toc: true
    embed-resources: true
    code-copy: true
execute:
  cache: false
  echo: true
  eval: true
---

GITHUB URL: <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-elnafem>

# Problem Background

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx, config = create_db_wrapper(config_map)
```

```{python}
run_sql_and_return_html(cnx, """
select table_schema, table_name, table_rows
from information_schema.tables
where table_schema in ('world_bank_data')
""")
```

# Exercises

## Task 1
```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Row Count"
FROM world_bank_data.wdi_country;
""")
```

## Task 2
```{python}
run_sql_and_return_html(cnx, """
SELECT *
FROM world_bank_data.wdi_country
LIMIT 22;
""")
```

## Task 3
```{python}
run_sql_and_return_html(cnx, """
SELECT `Short Name`
FROM world_bank_data.wdi_country
WHERE `Region` = '' OR `Income Group` = '';
""")

```

## Task 4
```{python}
## Drop the old table if it exists
execute_ddl(cnx, """
DROP TABLE IF EXISTS wdi_country;
""")

## Create the new clean country-only table
execute_ddl(cnx, """
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE `Region` <> ''
  AND `Income Group` <> ''
  AND `Short Name` NOT IN ('World', 'High income', 'Upper middle income', 'Lower middle income', 'Low income');
""")

## Then count how many rows
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Number of Countries"
FROM wdi_country;
""")

```

## Task 5
```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "2020 Country Count"
FROM wdi_country;
""")
```

## Task 6
```{python}
run_sql_and_return_html(cnx, """
SELECT DISTINCT `Region`
FROM wdi_country
ORDER BY `Region`;
""")

```

## Task 7
```{python}
run_sql_and_return_html(cnx, """
SELECT `Region`, COUNT(*) AS "Country Count"
FROM wdi_country
GROUP BY `Region`
ORDER BY "Country Count" DESC;
""")
```

## Task 8
```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, country_name
FROM wdi_country
WHERE country_region = 'North America'
ORDER BY country_name;
""")

```

## Task 9
```{python}
run_sql_and_return_html(cnx, """
SELECT `Region`, `Country Code`, `Short Name`
FROM wdi_country
WHERE LOWER(`Short Name`) = 'qatar';
""")
```

## Task 10
```{python}
run_sql_and_return_html(cnx, """
SELECT `Country Code`, `Short Name`, `2-alpha code`, `WB-2 code`, `Region`
FROM wdi_country
WHERE `2-alpha code` <> `WB-2 code`
ORDER BY `Short Name`;
""")
```

## Task 11
```{python}
run_sql_and_return_html(cnx, """
SELECT country_income, COUNT(*) AS num_countries
FROM wdi_country
GROUP BY country_income
ORDER BY num_countries DESC;
""")
```

## Task 12
```{python}
run_sql_and_return_html(cnx, """
SELECT country_name, country_code, country_region, country_income
FROM wdi_country
WHERE country_income IS NULL OR country_income = ''
ORDER BY country_name;
""")

```

## Task 13
```{python}
execute_ddl(cnx, """
UPDATE wdi_country
SET country_income = 'Upper middle income'
WHERE country_code = 'VEN';
""")

run_sql_and_return_html(cnx, """
SELECT country_code, country_name, country_income
FROM wdi_country
WHERE country_code = 'VEN';
""")

```

## Task 14
```{python}
run_sql_and_return_html(cnx, """
SELECT `Region`, `Income Group`, COUNT(*) AS Num_Countries
FROM wdi_country
GROUP BY `Region`, `Income Group`
ORDER BY `Region`, `Income Group`;
""")
```

## Task 15
```{python}
run_sql_and_return_html(cnx, """
SELECT
    country_region AS Region,
    SUM(CASE WHEN country_income = 'High income' THEN 1 ELSE 0 END) AS High_Income,
    SUM(CASE WHEN country_income = 'Upper middle income' THEN 1 ELSE 0 END) AS Upper_Middle_Income,
    SUM(CASE WHEN country_income = 'Lower middle income' THEN 1 ELSE 0 END) AS Lower_Middle_Income,
    SUM(CASE WHEN country_income = 'Low income' THEN 1 ELSE 0 END) AS Low_Income,
    SUM(CASE WHEN country_income IS NULL OR country_income = '' THEN 1 ELSE 0 END) AS Null_Income,
    COUNT(*) AS Total_Countries
FROM wdi_country
GROUP BY country_region
ORDER BY country_region;
""")

```

## Task 16
```{python}
run_sql_and_return_html(cnx, """
SELECT 
  country_region AS Region,
  COUNT(*) AS Low_Income_Countries
FROM wdi_country
WHERE country_income = 'Low income'
GROUP BY country_region
ORDER BY Low_Income_Countries DESC
LIMIT 1;
""")

```

## Task 17
```{python}
run_sql_and_return_html(cnx, """
SELECT `Country Code`, `Short Name`, `Region`, `Income Group`
FROM wdi_country
WHERE `Region` = (
  SELECT `Region`
  FROM wdi_country
  WHERE `Country Code` = 'MHL'
)
AND `Income Group` = (
  SELECT `Income Group`
  FROM wdi_country
  WHERE `Country Code` = 'MHL'
)
ORDER BY `Short Name`;
""")
```

## Task 18
```{python}
run_sql_and_return_html(cnx, """
SELECT r.Region, i.Income, COUNT(w.`Short Name`) AS num_countries
FROM (SELECT DISTINCT `Region` FROM wdi_country) r
CROSS JOIN (SELECT DISTINCT `Income Group` AS Income FROM wdi_country) i
LEFT JOIN wdi_country w ON r.Region = w.`Region` AND i.Income = w.`Income Group`
GROUP BY r.Region, i.Income
HAVING num_countries = 0
ORDER BY r.Region, i.Income;
""")
```

## Task 19
```{python}
run_sql_and_return_html(cnx, """
SELECT
    country_region AS Region,
    country_income AS Income_Group,
    COUNT(*) AS Country_Count,
    (SELECT COUNT(*) FROM wdi_country WHERE country_region = wdi_country.country_region) AS Region_Total,
    (SELECT COUNT(*) FROM wdi_country WHERE country_income = wdi_country.country_income) AS Income_Total,
    (SELECT COUNT(*) FROM wdi_country) AS Global_Total,
    ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM wdi_country), 2) AS Percent_Global
FROM wdi_country
GROUP BY country_region, country_income
ORDER BY Percent_Global DESC;
""")

```

## Task 20
```{python}
run_sql_and_return_html(cnx, """
SELECT
    country_region AS Region,
    ROUND(100 * SUM(CASE WHEN country_income = 'High income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS High_Income_Percent,
    ROUND(100 * SUM(CASE WHEN country_income = 'Upper middle income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Upper_Middle_Income_Percent,
    ROUND(100 * SUM(CASE WHEN country_income = 'Lower middle income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Lower_Middle_Income_Percent,
    ROUND(100 * SUM(CASE WHEN country_income = 'Low income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Low_Income_Percent,
    ROUND(100 * SUM(CASE WHEN country_income IS NULL OR country_income = '' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Other_Percent
FROM wdi_country
GROUP BY country_region
ORDER BY country_region;
""")

```

## Task 21
```{python}
run_sql_and_return_html(cnx, """
SELECT
    country_income AS Income_Group,
    COUNT(*) AS Country_Count,
    (SELECT COUNT(*) FROM wdi_country) AS Global_Total,
    ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM wdi_country), 1) AS Percent_Global
FROM wdi_country
GROUP BY country_income
ORDER BY Country_Count DESC;
""")

```


# Reflection

## 1. Reflect on SQL Skills
Throughout this assignment, I developed stronger skills in `SELECT`, `WHERE`, `GROUP BY`, and aggregation functions like `COUNT()`. I feel confident in writing basic queries and grouping data. I need more practice with `CROSS JOIN`, pivoting results, and cleaning datasets dynamically. This assignment helped reinforce structured SQL logic.

## 2. Problem-Solving Approach
For complex tasks like Tasks 18-21, I first visualized the output structure and wrote smaller subqueries. When encountering issues, I debugged piece by piece before merging queries together. In the future, I would plan more on paper before writing the SQL.

## 3. Learning Takeaways
SQL can be a powerful tool not just for querying but also for reshaping and validating datasets. These skills will help in real-world data analysis, data engineering, and building BI dashboards.

# README

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::
