---
title: Homework 8 - World Bank Analysis
author: Mohamed Elnafe
format:
  html:
    theme: cosmo
    toc: true
    embed-resources: true
    code-copy: true
execute:
  cache: false
  echo: true
  eval: true
---

GITHUB URL: <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-elnafem>

# Problem Background

```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx, config = create_db_wrapper(config_map)
``` 

```{python}
# Quick test of the connection
run_sql_and_return_html(cnx, """
select table_schema, table_name, table_rows
from information_schema.tables
where table_schema in ('world_bank_data')
""")
```

# Exercises

## Task 1 - How many records in wdi_country?

```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Row Count"
FROM world_bank_data.wdi_country;
""")
```

## Task 2 - Explore first 5 records

```{python}
run_sql_and_return_html(cnx, """
SELECT *
FROM world_bank_data.wdi_country
LIMIT 5;
""")
```

## Task 3 - List all non-countries

```{python}
run_sql_and_return_html(cnx, """
SELECT *
FROM world_bank_data.wdi_country
WHERE country_code IN (
  'WLD', 'ARB', 'CEB', 'CSS', 'EAS', 'EAP', 'ECA', 'EMU', 'EUU',
  'FCS', 'HIC', 'LAC', 'LCN', 'LDC', 'LIC', 'LMC', 'MEA', 'MIC',
  'MNA', 'NAC', 'OED', 'OSS', 'PRE', 'PSS', 'PST', 'SAS', 'SSA', 'SSF', 'UMC'
);
""")
```

## Task 4 - Create copy containing only countries

```{python}
execute_ddl(cnx, """
DROP TABLE IF EXISTS wdi_country;
""")
```

```{python}
execute_ddl(cnx, """
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE country_region <> ''
  AND country_income <> ''
  AND country_code NOT IN (
    'WLD', 'ARB', 'CEB', 'CSS', 'EAS', 'EAP', 'ECA', 'EMU', 'EUU',
    'FCS', 'HIC', 'LAC', 'LCN', 'LDC', 'LIC', 'LMC', 'MEA', 'MIC',
    'MNA', 'NAC', 'OED', 'OSS', 'PRE', 'PSS', 'PST', 'SAS', 'SSA', 'SSF', 'UMC'
  );
""")
```

```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "Number of Countries"
FROM wdi_country;
""")
```

## Task 5 - How many countries?

```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS "2020 Country Count"
FROM wdi_country;
""")
```

## Task 6 - Unique region values

```{python}
run_sql_and_return_html(cnx, """
SELECT DISTINCT country_region
FROM wdi_country
ORDER BY country_region;
""")
```

## Task 7 - Number of countries per region

```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, COUNT(*) AS num_countries
FROM wdi_country
GROUP BY country_region
ORDER BY num_countries DESC;
""")
```

## Task 8 - North America countries

```{python}
run_sql_and_return_html(cnx, """
SELECT country_name, country_region
FROM wdi_country
WHERE LOWER(country_region) = 'north america'
ORDER BY country_name;
""")
```

## Task 9 - Where is Qatar?

```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, country_code, country_name
FROM wdi_country
WHERE LOWER(country_name) = 'qatar';
""")
```

## Task 10 - Different abbreviations

```{python}
run_sql_and_return_html(cnx, """
SELECT country_code, country_name, country_abbr, country_wb_abbr, country_region
FROM wdi_country
WHERE country_abbr <> country_wb_abbr
ORDER BY country_name;
""")
```

## Task 11 - List income categories

```{python}
run_sql_and_return_html(cnx, """
SELECT country_income, COUNT(*)
FROM wdi_country
GROUP BY country_income
ORDER BY COUNT(*) DESC;
""")
```

## Task 12 - Find NULL income countries

```{python}
run_sql_and_return_html(cnx, """
SELECT country_name
FROM wdi_country
WHERE country_income = '';
""")
```

## Task 13 - Update Venezuela to High Income

```{python}
execute_ddl(cnx, """
UPDATE wdi_country
SET country_income = 'High income'
WHERE country_code = 'VEN';
""")
```

```{python}
run_sql_and_return_html(cnx, """
SELECT country_name, country_income
FROM wdi_country
WHERE country_code = 'VEN';
""")
```

## Task 14 - Region-Income pairs

```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, country_income, COUNT(*)
FROM wdi_country
GROUP BY country_region, country_income
ORDER BY country_region, country_income;
""")
```

## Task 15 - Pivot Region-Income Table

```{python}
run_sql_and_return_html(cnx, """
SELECT
  country_region,
  SUM(CASE WHEN country_income = 'High income' THEN 1 ELSE 0 END) AS High_income,
  SUM(CASE WHEN country_income = 'Upper middle income' THEN 1 ELSE 0 END) AS Upper_middle_income,
  SUM(CASE WHEN country_income = 'Lower middle income' THEN 1 ELSE 0 END) AS Lower_middle_income,
  SUM(CASE WHEN country_income = 'Low income' THEN 1 ELSE 0 END) AS Low_income,
  SUM(CASE WHEN country_income = '' THEN 1 ELSE 0 END) AS Other,
  COUNT(*) AS Total
FROM wdi_country
GROUP BY country_region
ORDER BY country_region;
""")
```

## Task 16 - Region with most low-income countries

```{python}
run_sql_and_return_html(cnx, """
SELECT COUNT(*) AS Low_income_count, country_region, country_income
FROM wdi_country
WHERE country_income = 'Low income'
GROUP BY country_region, country_income
ORDER BY Low_income_count DESC
LIMIT 1;
""")
```

## Task 17 - Countries similar to Marshall Islands

```{python}
run_sql_and_return_html(cnx, """
SELECT country_code, country_name, country_region, country_income
FROM wdi_country
WHERE country_region = (SELECT country_region FROM wdi_country WHERE country_code = 'MHL')
  AND country_income = (SELECT country_income FROM wdi_country WHERE country_code = 'MHL')
ORDER BY country_name;
""")
```

## Task 18 - Missing region-income combinations

```{python}
run_sql_and_return_html(cnx, """
SELECT r.region, i.income
FROM (SELECT DISTINCT country_region AS region FROM wdi_country) r
CROSS JOIN (SELECT DISTINCT country_income AS income FROM wdi_country) i
LEFT JOIN wdi_country w ON r.region = w.country_region AND i.income = w.country_income
GROUP BY r.region, i.income
HAVING COUNT(w.country_name) = 0
ORDER BY r.region, i.income;
""")
```

## Task 19 - Percent table

```{python}
run_sql_and_return_html(cnx, """
SELECT country_region, country_income, COUNT(*) AS country_count,
       (SELECT COUNT(*) FROM wdi_country WHERE country_region = w.country_region) AS region_total,
       (SELECT COUNT(*) FROM wdi_country WHERE country_income = w.country_income) AS income_total,
       (SELECT COUNT(*) FROM wdi_country) AS global_total,
       ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM wdi_country), 2) AS pct_global
FROM wdi_country w
GROUP BY country_region, country_income
ORDER BY pct_global DESC;
""")
```

## Task 20 - Percent pivot

```{python}
run_sql_and_return_html(cnx, """
SELECT country_region,
  ROUND(100 * SUM(CASE WHEN country_income = 'High income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS High_pct,
  ROUND(100 * SUM(CASE WHEN country_income = 'Upper middle income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Upper_pct,
  ROUND(100 * SUM(CASE WHEN country_income = 'Lower middle income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Lower_pct,
  ROUND(100 * SUM(CASE WHEN country_income = 'Low income' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Low_pct,
  ROUND(100 * SUM(CASE WHEN country_income = '' THEN 1 ELSE 0 END) / COUNT(*), 2) AS Other_pct
FROM wdi_country
GROUP BY country_region
ORDER BY country_region;
""")
```

## Task 21 - Overall income group percentages

```{python}
run_sql_and_return_html(cnx, """
SELECT country_income, COUNT(*) AS country_count,
       (SELECT COUNT(*) FROM wdi_country) AS global_total,
       ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM wdi_country), 2) AS pct_global
FROM wdi_country
GROUP BY country_income
ORDER BY country_count DESC;
""")
